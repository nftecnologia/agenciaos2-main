// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Schema AgênciaOS SaaS - Multi-tenant
// Gerado em: 06/01/2025

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE MODELS - Multi-tenancy
// ============================================================================

// Tenant principal - Agência
model Agency {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  ownerId     String   @unique
  settings    Json?
  plan        Plan     @default(FREE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  owner       User     @relation("AgencyOwner", fields: [ownerId], references: [id])
  members     User[]   @relation("AgencyMembers")
  clients     Client[]
  projects    Project[]
  revenues    Revenue[]
  expenses    Expense[]
  aiUsage     AIUsage[]
  ebooks      Ebook[]
  
  @@map("agencies")
}

// Usuários com roles
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // Para login com credenciais
  role          Role      @default(MEMBER)
  agencyId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos NextAuth
  accounts      Account[]
  sessions      Session[]
  
  // Relacionamentos AgênciaOS
  agency        Agency?   @relation("AgencyMembers", fields: [agencyId], references: [id])
  ownedAgency   Agency?   @relation("AgencyOwner")
  assignedTasks Task[]
  
  @@map("users")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// BUSINESS MODELS
// ============================================================================

// Clientes da agência
model Client {
  id          String   @id @default(cuid())
  agencyId    String
  name        String
  email       String?
  phone       String?
  company     String?
  address     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  projects    Project[]
  revenues    Revenue[]
  
  @@map("clients")
}

// Projetos
model Project {
  id          String        @id @default(cuid())
  agencyId    String
  clientId    String
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  budget      Decimal?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relacionamentos
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  boards      Board[]
  tasks       Task[]
  revenues    Revenue[]
  
  @@map("projects")
}

// Boards do Kanban
model Board {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  position    Int
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  
  @@map("boards")
}

// Tasks do Kanban
model Task {
  id          String   @id @default(cuid())
  projectId   String
  boardId     String
  assignedTo  String?
  title       String
  description String?
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  position    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  assignee    User?    @relation(fields: [assignedTo], references: [id])
  
  @@map("tasks")
}

// ============================================================================
// FINANCIAL MODELS
// ============================================================================

// Receitas
model Revenue {
  id          String   @id @default(cuid())
  agencyId    String
  clientId    String?
  projectId   String?
  description String
  amount      Decimal
  category    String
  isRecurring Boolean  @default(false)
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client      Client?  @relation(fields: [clientId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  
  @@map("revenues")
}

// Despesas
model Expense {
  id          String   @id @default(cuid())
  agencyId    String
  description String
  amount      Decimal
  category    String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  @@map("expenses")
}

// ============================================================================
// AI MODELS
// ============================================================================

// Uso de IA
model AIUsage {
  id          String   @id @default(cuid())
  agencyId    String
  agentType   String
  tokensUsed  Int
  cost        Decimal
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  agency      Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  @@map("ai_usage")
}

// Ebooks gerados por IA
model Ebook {
  id          String      @id @default(cuid())
  agencyId    String
  title       String
  description String?     @db.Text // JSON com descrição detalhada
  content     String?     @db.Text // JSON com conteúdo completo
  status      EbookStatus @default(DRAFT)
  pdfUrl      String?
  metadata    String?     @db.Text // JSON com metadados
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relacionamentos
  agency      Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  @@map("ebooks")
}

// Templates para ebooks
model EbookTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  cssStyles   String   @db.Text
  htmlLayout  String   @db.Text
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("ebook_templates")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Plan {
  FREE
  PRO
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EbookStatus {
  DRAFT
  DESCRIPTION_GENERATED
  DESCRIPTION_APPROVED
  GENERATING
  CONTENT_READY
  GENERATING_PDF
  COMPLETED
  ERROR
}
